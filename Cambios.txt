PicPas 0.6.3
============
Se permite la declaración de varios parámetros de una función, separadas por comas.
Se eliminan los campos TOPerand.size y TOPerand.catTyp y se cambia el código para evitar 
usarlos.
Se pemite definir parámetros de tipo REGISTER. Queda pendiente probar el código de 
reconocimiento de estas variables incluido TCompilerBase.GetOperand:
Se deja de implementar el evento OperationLoad  de TType, y se pasa a usar el evento 
OperationPop.
Se corrige la exploración de unidades anidadas.
Se corrige la resolución de nombres cuandos se incluyen varias unidades y para no buscar 
más allá de un nivel de anidamiento.
Se agregan los delimitadores (* y *), como comentarios en la definición de la sintaxis
del lexer.
Se agregan las operaciones Oper_bit_dif_bit, Oper_bit_dif_byte, Oper_bool_equ_bool,
Oper_bool_dif_bool.
Se mueve la declaración de los tipos de tokens adicionales a la unidad XpresParserPIC.
Se crea el método TCompiler.CompileCurBlockDummy;
Se crea el campo TCompiler.mode, y se implementa el modo PicPas;
Se modifica TCompiler.CompileIF, para soportar el modo PicPas y el modo Pascal.
Se agrega al Explorador de Código, una vista de explorador de archivo.
Se permite la selección del archivo actual en el explorador de archivo.
Se elimina el formulario CodeExplorer, porque ya se tiene un explorador de código.
Se define que se guarde en las configuraciones, el ancho del panel explorador de
código.
Se crea el método TfraEditView.LoadLastFileEdited() y se incluye la opción: "Abrir 
ultimo archivo editado al abrir", en la configuraciones.
Se modifica la sintaxis del IF, para adaptarse a la nueva sintaxis de PicPas.

PENDIENTES
Revisar la implementación de las estructuras. 
Controlar las acciones de edición (rehacer, deshcaer, grabar, ..) para que respondan al
editor seleccionado. También se podría usar la técnica de Ciberplex, de crear dinámicamente 
las acciones.
Cambiar a las funciones de tipo TGenCodPic._ADDWF(), para que acepten parámetros de tipo
TPICregister.
Implementar la traducción de idiomas.
Corregir el problema de la pérdida del nombre en las variables bit, en el código 
ensamblador.
Implementar la reutilización de variables usadas como parámetros.
Implementar el uso de parámetros de tipo REGISTER, para usar el registro W, o HW o Z.
Revisar el paso de parámetros byte a word o bits. 
Revisar el posible problema de pérdidad de resultado en el generador de código, cuando se
hace:   
SetResultExpres_bit(false);  //Fija resultado
SaveW(reg); 
...  // se actualiza Z.
RestoreW(reg); //<-Se pierde Z, si se restaura W.
Las funciones no usadas, en las unidades, aún se compilan, cuando la usa una función 
no usada.
¿Será posible crear una variable ANSWER de tipo REGISTER, para acceder al último resultado?

PicPas 0.6.2
============
Se define la combinación <Ctrl>+<delete> para borrrar la palabra actual.
Se activa el menú de archivos recientes, para cuando se abre nuevos archivos.
Se activa la compilación independiente de unidades.
Se implementa la declaración de procedimientos en las unidades.
Se implementa mayor nivel de detalle para ver a las unidades en el Explorador de Código.
Se habilita el guardar el modo de vista del Explorador de código.
Se crea la opción de configuración "Excluir variables no usadas.", para el código 
ensamblador.
Se mejora, considerablemente, la ventana de propiedades de elementos del explorador de 
código.
Se incluye el tratamiento de variables char en la rutina TxpEleVar.AbsAddr.
Se agregan las funciones del sistema SetAsInput() y SetAsOutput().
Se revisan las funciones de idioma, en el formulario principal.
Se crea la opción de configruación "Lenguaje", en la ventana "Config".
Se modifica TfrmPrincipal.fraEditView1SelectEditor(), para evitar llamar a 
ChangeAppearance(), cuando se cambia la selección del editor.


PicPas 0.6.1
============
Se corrige un error en la actualización del nombre ed archivo, cuando se abre uno nuevo.
Se implementa el tipo char, y las operaciones de asignación, y comparación.
Se implementan las funciones de sistemas Ord() y Chr() y bit().
Se crean los operadores desplazamiento >> y << y se implementan parcialmente
Se activa la opción de mostrar la posición del error o advertencia, cuando se hace doble
click en el panel de mensajes.
Se mejora identificación de elementos, en el explorador de código, para cuando se busca
la declaración en el editor.


PicPas 0.6.0
============
Se modifica TSynEditor.Create(), para crear una clase derivada de TSYnFacilCompletion.
Se crean más menús PopUp en el árbol de sintaxis, y se crean acciones. Se mejoran los 
menús y se permite ubicar la declaración de un elemento.
Se crea el formulario frmElemProperty, para mostrar las propiedades de un elemento del 
árbol de sintaxis.
Se crea TCompiler.CompileProcDeclarHeader() y se activa el procesamiento de declaraciones
de funciones en la INTERFAZ de las unidades.
Se mejora la ventana del árbol de sintaxis, que ahora tiene el títutlo "Explorador de 
Código", incuye un cuadro de búsqueda y maneja dos modos de visualización.
Se crea la clase TxpEleBody y se define que se cree el nodo Body, como un nodo 
independiente, dentro del árbol de sintaxis, para las funciones y el programa principal.
Se crean los métodos TxpElement.LastNode y TxpElement.BodyNode.
Se implementa la detección de variables locales y parámetros de procedimientos.
Se crea el tipo TxpParFunc, y se modifica la definición  de TxpEleFun.pars[].
Se implementa el paso de parámetros a procedimientos.
Se crea el método Index, para ubicar a los elementos dentro de su contenedor.
Se re-escriben las rutinas TXpTreeElements.FindFirst() y TXpTreeElements.FindNext()
para implementar la búsqueda recursiva hacia "atrás".
Se activa la búsqueda recursiva de nombres a través de las unidades. Aún está por 
verificar.
Se mejora la resolución de nombres para las variables absolutas.
Se completa la documentación técnica y el manual de usuario.


PicPas 0.5.9
============
Se ordenan y uniformizan los mensajes de Error y Advertencia. Se crean nuevas versiones
de métodos para generar mensajes de error.
Se define que los editores trabajen con una ruta de archivos temporales:
<AppPath>/temp y para que los archivos se guarden siempre, antes de compilarse.
Se mejora la administración de archivos, en las ventanas de edición, para la compilación.
Se mejora el tratamiento de unidades. Se reconoce la sintaxis básica con declaraciones 
de variables y constantes.
Se corrige el lexer para el código ensamblador, que había quedado desactualizado, con los
últimos cambios.
Se corrigen 2 llamadas erróneas a Oper_bit_or_bit en TGenCod.Oper_bit_xor_bit().
Se elimina el campo BooleanBit, de TGenCodPic.
Se crea la bandera "InvertedFromC", para permitir optimizaciones con expresiones lógicas.
Se implementa la operación Oper_byte_great_byte(). Aün no se ha validado.
Se corrige un error en la asignación de nombres de las lenguetas cuando se guarda un 
archivo.
Se mejora el manejo del diálogo "Guardar COmo ...", para que incluya la extensión "*.pas"
por defecto.
Se actualiza para trabajar con la versión 1.2 de SynFacilUtils.
Se revias el procesamiento de constantes para mejorar la detección de errores y recabar
información sobre su uso.
Se agregan "ELSE" y "ABSOLUTE", como palabras reservada en la definición de sintaxis.
Se cambia el nombre a TXpElemnt.src por TXpElemnt.srcDec 
Se empieza con la creación del manual de usuario.
Se crea el método TfraEditView.SelectOrLoad().



PicPas 0.5.8
============
Se crea el evento TCompilerBase.OnWarning y las funciones sobrecaragdas GenWarn().
Se crea el frame FrameMessagesWin y se incluyen ocpiones mejoradas para visualizar los
mesnajes de compilación.
Se reemplaza el ListBox, de la ventana principal, por un FrameMessagesWin.
Se activa la generación de advertencias, desde el compilador.
Se elimina la dependencia del objeto PError, de Xpres, para usar rutinas propias de 
gestión de errores.
Se cambia de nombre a CompileVarDeclar por CompileGlobalVarDeclar.
Se cambia de nombre a TGenCodPic.CreateVar() por TGenCodPic.CreateVarinRAM()
Se crea el método TCompilerBase.CreateVar().
Se mueve parte del código de verificación de CompileProcDeclar(), a CompileProcDeclar,
porque no tiene sentido incluirlo allí.
Se crea el tipo TSrcPos, y se usa en TxpELement.
Se adecúa TCompiler.CompileProcDeclar, para trabajar con TSrcPos.
Se cambia de nombre a CompileProcDeclar() por CompileProcBody().
Se modifica TCompiler.CompileGlobalVarDeclar(), para que actualice la ubicación de la 
variable en el código fuente.
Se agrega protección a incrementar el contador TxpElement.nCalled, en la segunda pasada.
Se implementa la lectura de las unidades, pero no la exploración.
Se crea la variable global "rutUnits", para almacenar las ruta deonde se buscarán las 
unidades de PicPas.
Se crean la nueva clase TxpEleUnit (y todo el código relacionado), para modelar a las 
unidades.
Se crea el método TCompilerBase.CreateUsesDeclaration().
Se modifica el explorador de código para que muestre también a las unidades.
Se modifica DuplicateIn() de algunos elementos, para que usen listas en lugar de TObject.

PicPas 0.5.7
============
Se incluyen optimizaciones, para algunos casos con las operaciones XOR (que es lo mismo que 
comparación de bits).
Se incluyen rutinas de verificación de error, para la instrucción SaveW().
Se incluye una verificación adicional de error en TCompiler.CompileInstruction;
Se incluye verificación para límite de memoria Flash.
Se modifican las rutinas de geenración de comentarios, y se incluye la rutina 
TGenCodPic.PutLabel() para agregar etiquetas al código ensamblador.
Se mejora el formato de los comentarios en el código ensamblador.
Se incluye plegado de código para el código en ensamblador.
Se cambia el nombre de TXpTreeElements.OpenElement() por 
TXpTreeElements.CreateAndOpenElement().
Se crea TXpTreeElements.OpenElement(), pero con otra función.
Se elimina el enumerado TFindFuncResult.
Se modifica TCompiler.CompileProgram, para que reinicie también la RAM y flash, antes
de compilar el programa principal.
Se crea el evento TXpTreeElements.OnTreeChange.
Se incluye información de la compilación, en la documentación.
Se elimina el método TCompileBase.CloseFunction().


PicPas 0.5.6
============
Se implementa la operación bit_xor_byte().
Se implementan las operaciones bit_equ_bit(), bit_equ_byte y Oper_bool_xor_bool().
Se corrige una llamada a Cod_StartProgram en TCompiler.CompileFile():
Se cambia la versión de PicUtils a la 0.7.
Se implementa el método de compilación en dos pasadas. Se elimina el método anterior, 
de múltiples pasadas, incluyendo sus variables.
Se implementa un método para realizar, la compilación-enlace.
Se aumentan campos a la clase TxpElement, para gaurdar la ubicación del elemento en el
código fuente.
Se modifican las definciones de las clases de los elementos TxpEleVar y TxpEleFun, para 
adecuarse al nuevo esquema de trabajo.
Se cambian diversas rutinas de la unidad "Parser", para adaptarse a la nueva forma de
trabajo.
Se modifica TGenCodPic.CreateVar(), para que se pueda usar por el "enlazador".
Se reordenan los métodos de la unidad "Parser".
Se incluye la opción de contar las veces en que una variable o función es llamada.
Se revisa y modifican FindFirst y FindNext de TXpTreeElements.
Se crea la función TXpTreeElements.FindNextFunc().
Se elimina TXpTreeElements.FindFuncWithParams().
Se modifica TCompilerBase.GetOperand() para hacerla m´s eficiente y confiable en el 
reconocimiento de funciones.

PicPas 0.5.5
============
Se deja de usar el componenet PageControl, como contenedor de los editores.
Se hacen importantes cambios con respecto a la interfaz gráfica. Se crea el frame 
FrameEditView y se implementa un sistema de pestañas, para manejar múltiples editores.
Se re-escriben diversas funciones de manejo de archivos en FrameEditView y se modifica
la unidad principal para manejar mejor, el sistema de múltiples pestañas.


PicPas 0.5.4
============
Se crea el tipo TxpEleFuns.
Se crea la lista TCOmpilerBase.listFunSys, para alamcenar a las funciones del sistema.
Se modifica TCompilerBase.GetOperand, para que pase el control a la función del sistema
sin extraer os parámetros.
Se elimina TCompilerBase.CaptureParamsSys.
Se crea TCompilerBase.CaptureTok(), y se simplifica TCompilerBase.CaptureParams;
Se cambia la forma en que se declaran las funciones del sistema. Se eliminan los parámetros
y se deja el procesamiento por código.
Se implementan las funciones del sistema con el nuevo esquema de trabajo.
Se crean los métodos TxpEleVar.AbsAdrrL y TxpEleVar.AbsAdrrH.
Se corrigen los nombres para los bytes de las variables Word, en el código ensamblador. 
Ahora aparecen como <nombre>@<byte>
Se crea la unidad PicPasProject, para las definiciones de proyecto.
Se crea el concepto de Proyecto, y se modifica la interfaz para trabajar con proyectos.


PicPas 0.5.3
============
Se mueve la declaración de TPicRegister y TPicRegisterPIC, de la undiad GenCodPic a 
XpresElementsPIC.
Se modifica la estructura de TxpEleVar, para que pase a usar objetos de tipo TPicRegister y
TPicRegisterBit, como contenedores de direcciones físicas.
Se modifican TOperand.offs, TOperand.Loff, TOperand.Hoffs, y todas las funciones 
relacionadas a las direcciones físicas.
Se crea TOperand.Lbank: 
Se cambia todo el formulario de configuración por otro para ya no usar la librería 
ConfigFrame, sino MiCOnfig.
Se modifica la definición de TGenCodPic.CreateVar() y se crean funciones adicionales.
Se agregan opciones de configuración para formatear el texto en ensamblador generado.
Se modifican las rutinas de gestión de memoria de GenCodPic, para que incluyan el nombre
a los registros bit.
Se agregan los métodos: TGenCodPic.GetVarByteFromStk y TGenCodPic.GetVarBitFromStk.
Se agregan los métodos: TGenCodPic.AssignRAMinBit() y TGenCodPic.AssignRAMinByte().
Se cambia de nombre a TGenCodPic.AssignRAM() (la versión bit) por TGenCodPic.AssignRAMbit(), 
para seguri el orden de los nombres.
Se eliminan TGenCodPic.CreateVarBit() y TGenCodPic.CreateVarByte().
Se corrige un error en la evaluación de operaciones bit de tipo coExpres_Expres.
Se mejora considerablemente el código ensamblador generado.


PicPas 0.5.2
============
Se cambia la librería SynFacilUtils a la versión 1.0. Esto implica modificar el código en 
los puntos en donde se hace referencia a los identificadores de tokens.
Como producto del cambio, se puede ahora compilar PicPas con seguridad en plataformas de
64 bits.
Se implementa la operación Oper_bit_or_byte.
Se implementa la operación Oper_bit_xor_bit.
Se crea el nodo "Units" en el visor de árbol de sintaxis.


PicPas 0.5.1
============
Se crea el enumerado TOperType en XpresParserPIC.
Se crea el campo TCompilerBase.operType, y se incializa antes de llamar a las rutinas 
de operación.
Se crean los método TGenCodPic.SetResultExpresBit, TGenCodPic.SetResultExpresBool,
TGenCodPic.SetResultExpresByte, y se incluyen en el generador de código.
Se elimina el campo "BooleanInverted", y se crea TOperand.Inverted.
Se modifican TGenCodPic.SetResultVariab_bit(), TGenCodPic.SetResultExpres_bit() y 
TGenCodPic.SetResultConst_bit(), para que consideren el campo "Inverted".
Se modifica al generador de código con las nuevas modificaciones.
Se implementa la operación: bit OR bit.
Se cambia de nombre a Oper_bit_not por Oper_not_bit.
Se implementa la rutina bit AND bit, considerando los casos de variables y expresiones, con
lógica invertida.
Se simplifica Oper_bool_asig_bool(), usando la rutina Oper_bit_asig_bit().
Se crea las operaciones NOT, AND y OR, para el tipo Boolean
Se agrega soporte para los dispositivos PIC12F629
 y PIC12F675
. 


PicPas 0.5.0
============
Se corrigió un problema de conmutación de bancos en las operaciones de asignación.
Se eliminó el campo lastBank.
Se modificó TGenCodPic._BANKSEL() para que devuelva el número de instrucciones
generado.
Se incluyó rutinas de conmutación de bancos, en diversos puntos del generador de 
código y de GenCodPic.
Se completó la rutina de asignación de bits.
Se cambia el nombre de RequireHW() por RequireResult_HW()


PicPas 0.4.9
============
Se mueven los campos de atributos de la clase TGenCod a TGenCodPic.
Se mueve el método TPicRegister.AssignRAM() a TGenCodPic. 
Se simplifica la clase TPicRegister, ya que no reuqiere ahora refernecia al PIC.
Se crea la clase TPicRegisterBit.
Se cambia de nombre a registerList por listRegAux
Se cambia de nombre a registerStack por listRegStk.
Se cambia de nombre a CreateByteRegister por CreateRegisterByte.
Se crean las listas listRegAuxBit y listRegStkBit.
Se crean funciones de gestión de memoria pàra bits.
Se crea el registro Z como de tipo TPicRegisterBit.
Se corrige TGenCodPic.StartRegs, para que inicialize al puntero stacktop.


PicPas 0.4.8
============
Se elimina TGenCodPic.NewAuxRegisterByte y se integra en TGenCodPic.GetAuxRegisterByte().
Se cambia el nombre de TGenCodPic.FreeByte(), por TGenCodPic.FreeStkRegisterByte().
Se corrigió el código generado por TGenCod.Oper_word_add_word(), en la categoría 
coVariab_Variab.
Se implementa la generación de código correcto para evalúar (x+1) + (x+2), con x:word.
Se elimina TgenCodPic.RequireResultByte().
Se simplifica y se cambia de nombre a RequireResultWord(), por RequireHW().
Se crea el método TxpEleVar.BitMask().
Se optimiza el código generado para: NOT <variable bit>, y para las asiganciones de tipo 
bit. 
Se quitan las referencias a W.used en el generador de código, porque no son precisas.
Se crean los métodos: SetResultConst_bool, SetResultConst_bit, SetResultConst_byte y 
SetResultExpres(typ: TType), en TgenCodPic, para facilitar la actualización de "res".
Se reemplazan diversas rutinas de inicialización de "res", por las nuevas rutinas 
creadas.
Se cambia de nombre a las variables de tipo tipBit, tipBool, tipByte, y tipWord.
Se convierte TGenCodPic.RequireW(), en función. 
Se crean los métodos TGenCodPic.SaveW() y TGenCodPic.RestoreW().
Se cambia el nombre a RequireW() por RequireResult_W().
Se corrigió un problema en la rutina TGenCod.byte_oper_byte(), referida a la resta de 
una variable y una constante.
Se mejoró la documentación.


PicPas 0.4.7
============
Se agregan los identificadores de funciones del sistema, como del tipo tkSysFunct, en la
definición de la sintaxis.
Se crea el tipo TPosExpres, para clasificar a las expresiones por su ubicación.
Se cambia el tipo de parámetro de GetExpressionE() al nuevo tipo TPosExpres.
Se elimina finalmente el registro _H y se pasa a usar H, de tipo TPICRegister.
Se eliminan los tipos, estructuras, y métodos anteriores de administración de memoria.
Se agrega la operación byte + word.
Se corrige una llamada errónea a GetExpressionE(), por GetExpression(), en 
TCompilerBase.GetOperand().
Se cambian los mensajes de registro (debugln) en las expresiones para que usen Oper()
en lugar de Eval(), ya que es así como se usa en la documentación.
Se eliminan las llamadas a ReserveW, ReserveH y se reemplazan por llamadas a las nuevas
rutinas de gestión de memoria.
Se crea el campo TPicRegister.typ, y se crea el tipo TPicRegType, para clasificar a los 
registros.
Se crea el método TGenCodPic.CreateByteRegister().
Se cambia de nombre a NewByteRegister() por NewAuxRegisterByte().
Se cambia de nombre a GetUnusedByteRegister() por GetAuxRegisterByte().
Se elimina el método GetUnusedByteRegister_NoWH().
Se implementa el manejo de registros de pila.


PicPas 0.4.6
============
Se mueven las rutinas de gestión de memoria a la clase TgenCodPic.
Se crea la unidad FrameSyntaxTree, para definir al frame para el árbol de sintaxis.
Se implementa un árbol de sintaxis básico, y se muestra en la pantalla principal.
Se crea el tipo TPicRegister_list y el campo  TGenCodPic.registerList, para alamcenar
los registros de trabajo y auxiliares.
Se cren diversas rutinas de gestión de memoria y se reemplazan las anteriores, porque
tenína algunas fallas.
Se cambia la rutina codif_delay_ms, para que deje de usar el registro _L.
Se creea el método TGenCodPic.ReportRAMusage(), para generar un reporte de uso de la RAM.
Se elimina el resgistro de trabajo _L, y se pasa a usar registros auxiliares.
	

PicPas 0.4.5
============
Se implementan más operaciones con el tipo "bit".
Se cambian de nombre a las rutinas de operación del generador de código, agregándoles el prefijo 
"Oper_".
Se cambia de nombre a las rutinas de tipo TCompilerBase.Evaluar*, por TCompilerBase.Oper*, 
Se cambia de nombre a TCompilerBase.GetExpression() por TCompilerBase.GetExpressionE().
Se cambia de nombre a TCompilerBase.GetExpressionCore() por TCompilerBase.GetExpression().
Se mueven las variables "BooleanInverted" y "BooleanBit", para que sean parte de la clase 
TGenCod.
Se crea el campo TGenCod.LastCatOp.
Se mejora considerablemente la documentación técnica.


PicPas 0.4.4
============
Se divide el método TGenCod.StartSyntax; en dos: TGenCod.StartSyntax() y TGenCod.DefCompiler();
Se crea el tipo "bit", y se crean algunas operaciones básicas.
Se modifica TCompiler.TipDefecNumber(), simplificando las validaciones.
Se modifica TCompiler.CompileVarDeclar() para incluir al tipo "bit".
Se crea TCompilerBase.FindType() y se simplifican los códigos de búsqueda de tipos.
Se mejora la rutina TCompiler.RAMusage(), para indicar el bit en las variables booleanas y bit.


PicPas 0.4.3
============
Se cambia la librerías XPresParserPIC a la forma de trabajo de Xpres versión 1.2.


PicPas 0.4.2
============
Se cambia la librerías XPresParserPIC a la forma de trabajo de Xpres versión 1.1.


PicPas 0.4.1
============
Se cambia la librerías XPresParserPIC a la forma de trabajo de Xpres versión 1.0.
Se adecúa XpresElementsPIC, para que mantenga la similitud con XpresElements de Xpres 1.0.
Se crea la unidad genCodPic, y se mueven las rutinas relacionadas a las instrucciones del
microcontrolador.

PicPas 0.4
===========
Se actualizan las librerías usadas a las versiones más recientes.
Se cambia de nombre a los elementos del enumerado TxpElemType

PicPas 0.3.5
============
* Se cambia la declaración TProcLoadOperand, usando un puntero como parámetro, para permitir el paso de
un objeto TOperand, cuya definición se hará en otras unidades.
* Se quita eL parámetro "amb" de TTypes, de modo que se quita la dependencia de "SynFacilSyn", a la unidad
XPresTypes y se deja a XPresTypes como una unidad sin dependencias.
* Se sinccroniza el código de la unidad XPresTypes, con la misma unidad XPresTypes, usada en la librería 
Xpres 0.6.9. Así se maneja un archivo menos.
* Se corrige un error de duplicidad de codificación de la rutina delay_ms().
* Se agrega el manejo de bancos para las variables (aún incompleta, falta implementar para operaciones WORD y en llamada
a funciones). 