PicPas 0.5.2
============
Se cambia la librería SynFacilUtils a la versión 1.0. Esto implica modificar el código en 
los puntos en donde se hace referencia a los identificadores de tokens.
Como producto del cambio, se puede ahora compilar PicPas con seguridad en plataformas de
64 bits.
Se implementa la operación Oper_bit_or_byte.
Se implementa la operación Oper_bit_xor_bit.

PENDIENTES
Revisar si no es mejor tener funciones separadas para cada tipo, en lugar de una sola
función TGenCodPic.CreateVar().
Cambiar a las funciones de tipo TGenCodPic._ADDWF(), para que acepten parámetros de tipo
TPICregister.
Terminar de implementar las operaciones del tipo bit.
Implementar que la gestión de memoria para variables, tome posiciones no necesariamente 
consecutivas, para variables word.
Implementar la llamada correcta para las funciones del sistema y de usuario.


PicPas 0.5.1
============
Se crea el enumerado TOperType en XpresParserPIC.
Se crea el campo TCompilerBase.operType, y se incializa antes de llamar a las rutinas 
de operación.
Se crean los método TGenCodPic.SetResultExpresBit, TGenCodPic.SetResultExpresBool,
TGenCodPic.SetResultExpresByte, y se incluyen en el generador de código.
Se elimina el campo "BooleanInverted", y se crea TOperand.Inverted.
Se modifican TGenCodPic.SetResultVariab_bit(), TGenCodPic.SetResultExpres_bit() y 
TGenCodPic.SetResultConst_bit(), para que consideren el campo "Inverted".
Se modifica al generador de código con las nuevas modificaciones.
Se implementa la operación: bit OR bit.
Se cambia de nombre a Oper_bit_not por Oper_not_bit.
Se implementa la rutina bit AND bit, considerando los casos de variables y expresiones, con
lógica invertida.
Se simplifica Oper_bool_asig_bool(), usando la rutina Oper_bit_asig_bit().
Se crea las operaciones NOT, AND y OR, para el tipo Boolean
Se agrega soporte para los dispositivos PIC12F629
 y PIC12F675
. 


PicPas 0.5.0
============
Se corrigió un problema de conmutación de bancos en las operaciones de asignación.
Se eliminó el campo lastBank.
Se modificó TGenCodPic._BANKSEL() para que devuelva el número de instrucciones
generado.
Se incluyó rutinas de conmutación de bancos, en diversos puntos del generador de 
código y de GenCodPic.
Se completó la rutina de asignación de bits.
Se cambia el nombre de RequireHW() por RequireResult_HW()


PicPas 0.4.9
============
Se mueven los campos de atributos de la clase TGenCod a TGenCodPic.
Se mueve el método TPicRegister.AssignRAM() a TGenCodPic. 
Se simplifica la clase TPicRegister, ya que no reuqiere ahora refernecia al PIC.
Se crea la clase TPicRegisterBit.
Se cambia de nombre a registerList por listRegAux
Se cambia de nombre a registerStack por listRegStk.
Se cambia de nombre a CreateByteRegister por CreateRegisterByte.
Se crean las listas listRegAuxBit y listRegStkBit.
Se crean funciones de gestión de memoria pàra bits.
Se crea el registro Z como de tipo TPicRegisterBit.
Se corrige TGenCodPic.StartRegs, para que inicialize al puntero stacktop.


PicPas 0.4.8
============
Se elimina TGenCodPic.NewAuxRegisterByte y se integra en TGenCodPic.GetAuxRegisterByte().
Se cambia el nombre de TGenCodPic.FreeByte(), por TGenCodPic.FreeStkRegisterByte().
Se corrigió el código generado por TGenCod.Oper_word_add_word(), en la categoría 
coVariab_Variab.
Se implementa la generación de código correcto para evalúar (x+1) + (x+2), con x:word.
Se elimina TgenCodPic.RequireResultByte().
Se simplifica y se cambia de nombre a RequireResultWord(), por RequireHW().
Se crea el método TxpEleVar.BitMask().
Se optimiza el código generado para: NOT <variable bit>, y para las asiganciones de tipo 
bit. 
Se quitan las referencias a W.used en el generador de código, porque no son precisas.
Se crean los métodos: SetResultConst_bool, SetResultConst_bit, SetResultConst_byte y 
SetResultExpres(typ: TType), en TgenCodPic, para facilitar la actualización de "res".
Se reemplazan diversas rutinas de inicialización de "res", por las nuevas rutinas 
creadas.
Se cambia de nombre a las variables de tipo tipBit, tipBool, tipByte, y tipWord.
Se convierte TGenCodPic.RequireW(), en función. 
Se crean los métodos TGenCodPic.SaveW() y TGenCodPic.RestoreW().
Se cambia el nombre a RequireW() por RequireResult_W().
Se corrigió un problema en la rutina TGenCod.byte_oper_byte(), referida a la resta de 
una variable y una constante.
Se mejoró la documentación.


PicPas 0.4.7
============
Se agregan los identificadores de funciones del sistema, como del tipo tkSysFunct, en la
definición de la sintaxis.
Se crea el tipo TPosExpres, para clasificar a las expresiones por su ubicación.
Se cambia el tipo de parámetro de GetExpressionE() al nuevo tipo TPosExpres.
Se elimina finalmente el registro _H y se pasa a usar H, de tipo TPICRegister.
Se eliminan los tipos, estructuras, y métodos anteriores de administración de memoria.
Se agrega la operación byte + word.
Se corrige una llamada errónea a GetExpressionE(), por GetExpression(), en 
TCompilerBase.GetOperand().
Se cambian los mensajes de registro (debugln) en las expresiones para que usen Oper()
en lugar de Eval(), ya que es así como se usa en la documentación.
Se eliminan las llamadas a ReserveW, ReserveH y se reemplazan por llamadas a las nuevas
rutinas de gestión de memoria.
Se crea el campo TPicRegister.typ, y se crea el tipo TPicRegType, para clasificar a los 
registros.
Se crea el método TGenCodPic.CreateByteRegister().
Se cambia de nombre a NewByteRegister() por NewAuxRegisterByte().
Se cambia de nombre a GetUnusedByteRegister() por GetAuxRegisterByte().
Se elimina el método GetUnusedByteRegister_NoWH().
Se implementa el manejo de registros de pila.


PicPas 0.4.6
============
Se mueven las rutinas de gestión de memoria a la clase TgenCodPic.
Se crea la unidad FrameSyntaxTree, para definir al frame para el árbol de sintaxis.
Se implementa un árbol de sintaxis básico, y se muestra en la pantalla principal.
Se crea el tipo TPicRegister_list y el campo  TGenCodPic.registerList, para alamcenar
los registros de trabajo y auxiliares.
Se cren diversas rutinas de gestión de memoria y se reemplazan las anteriores, porque
tenína algunas fallas.
Se cambia la rutina codif_delay_ms, para que deje de usar el registro _L.
Se creea el método TGenCodPic.ReportRAMusage(), para generar un reporte de uso de la RAM.
Se elimina el resgistro de trabajo _L, y se pasa a usar registros auxiliares.
	

PicPas 0.4.5
============
Se implementan más operaciones con el tipo "bit".
Se cambian de nombre a las rutinas de operación del generador de código, agregándoles el prefijo 
"Oper_".
Se cambia de nombre a las rutinas de tipo TCompilerBase.Evaluar*, por TCompilerBase.Oper*, 
Se cambia de nombre a TCompilerBase.GetExpression() por TCompilerBase.GetExpressionE().
Se cambia de nombre a TCompilerBase.GetExpressionCore() por TCompilerBase.GetExpression().
Se mueven las variables "BooleanInverted" y "BooleanBit", para que sean parte de la clase 
TGenCod.
Se crea el campo TGenCod.LastCatOp.
Se mejora considerablemente la documentación técnica.


PicPas 0.4.4
============
Se divide el método TGenCod.StartSyntax; en dos: TGenCod.StartSyntax() y TGenCod.DefCompiler();
Se crea el tipo "bit", y se crean algunas operaciones básicas.
Se modifica TCompiler.TipDefecNumber(), simplificando las validaciones.
Se modifica TCompiler.CompileVarDeclar() para incluir al tipo "bit".
Se crea TCompilerBase.FindType() y se simplifican los códigos de búsqueda de tipos.
Se mejora la rutina TCompiler.RAMusage(), para indicar el bit en las variables booleanas y bit.


PicPas 0.4.3
============
Se cambia la librerías XPresParserPIC a la forma de trabajo de Xpres versión 1.2.


PicPas 0.4.2
============
Se cambia la librerías XPresParserPIC a la forma de trabajo de Xpres versión 1.1.


PicPas 0.4.1
============
Se cambia la librerías XPresParserPIC a la forma de trabajo de Xpres versión 1.0.
Se adecúa XpresElementsPIC, para que mantenga la similitud con XpresElements de Xpres 1.0.
Se crea la unidad genCodPic, y se mueven las rutinas relacionadas a las instrucciones del
microcontrolador.

PicPas 0.4
===========
Se actualizan las librerías usadas a las versiones más recientes.
Se cambia de nombre a los elementos del enumerado TxpElemType

PicPas 0.3.5
============
* Se cambia la declaración TProcLoadOperand, usando un puntero como parámetro, para permitir el paso de
un objeto TOperand, cuya definición se hará en otras unidades.
* Se quita eL parámetro "amb" de TTypes, de modo que se quita la dependencia de "SynFacilSyn", a la unidad
XPresTypes y se deja a XPresTypes como una unidad sin dependencias.
* Se sinccroniza el código de la unidad XPresTypes, con la misma unidad XPresTypes, usada en la librería 
Xpres 0.6.9. Así se maneja un archivo menos.
* Se corrige un error de duplicidad de codificación de la rutina delay_ms().
* Se agrega el manejo de bancos para las variables (aún incompleta, falta implementar para operaciones WORD y en llamada
a funciones). 